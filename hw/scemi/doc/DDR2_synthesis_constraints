########################################################################
# Controller 0
# Memory Device: DDR2_SDRAM->SODIMMs->MT4HTF3264HY-53E
# Data Width:     64
# Frequency:      125
# Time Period:      8000
# Data Mask:     1
########################################################################

NET    "clk_gen_pll_CLKOUT1" TNM_NET = memory_clock;
TIMESPEC TS_memory_clock = PERIOD memory_clock __MEM_CLOCK_PERIOD__ ns HIGH 50 % INPUT_JITTER 300 ps;

# Richard Uhler, Thu Apr  7 14:00:46 EDT 2011
# I'm adding these SYS_CLK and SYS_CLK_200 timespecs because they appear to be
# missing. I've also updated bogus references to TS_SYS_clk with the now valid
# reference to TS_SYS_CLK
NET "*/u_ddr2_infrastructure/sys_clk_ibufg" TNM_NET =  "SYS_CLK";
TIMESPEC "TS_SYS_CLK" = PERIOD "SYS_CLK" __MEM_CLOCK_PERIOD__ ns HIGH 50 %;

NET "*/u_ddr2_infrastructure/clk200_ibufg" TNM_NET = "SYS_CLK_200";
TIMESPEC "TS_SYS_CLK_200" = PERIOD "SYS_CLK_200" 5 ns HIGH 50 %;



################################################################################
# I/O STANDARDS
################################################################################

NET  "*DDR2_DQ[*]"                               IOSTANDARD = SSTL18_II;
NET  "DDR2_A[*]"                                IOSTANDARD = SSTL18_II;
NET  "DDR2_BA[*]"                               IOSTANDARD = SSTL18_II;
NET  "DDR2_RAS_N"                               IOSTANDARD = SSTL18_II;
NET  "DDR2_CAS_N"                               IOSTANDARD = SSTL18_II;
NET  "DDR2_WE_N"                                IOSTANDARD = SSTL18_II;
NET  "DDR2_CS_N"                                IOSTANDARD = SSTL18_II;
NET  "DDR2_ODT"                                 IOSTANDARD = SSTL18_II;
NET  "DDR2_CKE"                                 IOSTANDARD = SSTL18_II;
NET  "DDR2_DM[*]"                               IOSTANDARD = SSTL18_II;
NET  "*DDR2_DQS[*]"                              IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "*DDR2_DQS_N[*]"                            IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "DDR2_CLK_P[*]"                            IOSTANDARD = DIFF_SSTL18_II;
NET  "DDR2_CLK_N[*]"                            IOSTANDARD = DIFF_SSTL18_II;

################################################################################
# Location Constraints
################################################################################

NET  "*DDR2_DQ[0]"                                LOC = "AF30" ;          
NET  "*DDR2_DQ[1]"                                LOC = "AK31" ;          
NET  "*DDR2_DQ[2]"                                LOC = "AF31" ;          
NET  "*DDR2_DQ[3]"                                LOC = "AD30" ;          
NET  "*DDR2_DQ[4]"                                LOC = "AJ30" ;          
NET  "*DDR2_DQ[5]"                                LOC = "AF29" ;          
NET  "*DDR2_DQ[6]"                                LOC = "AD29" ;          
NET  "*DDR2_DQ[7]"                                LOC = "AE29" ;          
NET  "*DDR2_DQ[8]"                                LOC = "AH27" ;          
NET  "*DDR2_DQ[9]"                                LOC = "AF28" ;          
NET  "*DDR2_DQ[10]"                               LOC = "AH28" ;          
NET  "*DDR2_DQ[11]"                               LOC = "AA28" ;          
NET  "*DDR2_DQ[12]"                               LOC = "AG25" ;          
NET  "*DDR2_DQ[13]"                               LOC = "AJ26" ;          
NET  "*DDR2_DQ[14]"                               LOC = "AG28" ;          
NET  "*DDR2_DQ[15]"                               LOC = "AB28" ;          
NET  "*DDR2_DQ[16]"                               LOC = "AC28" ;          
NET  "*DDR2_DQ[17]"                               LOC = "AB25" ;          
NET  "*DDR2_DQ[18]"                               LOC = "AC27" ;          
NET  "*DDR2_DQ[19]"                               LOC = "AA26" ;          
NET  "*DDR2_DQ[20]"                               LOC = "AB26" ;          
NET  "*DDR2_DQ[21]"                               LOC = "AA24" ;          
NET  "*DDR2_DQ[22]"                               LOC = "AB27" ;          
NET  "*DDR2_DQ[23]"                               LOC = "AA25" ;          
NET  "*DDR2_DQ[24]"                               LOC = "AC29" ;          
NET  "*DDR2_DQ[25]"                               LOC = "AB30" ;          
NET  "*DDR2_DQ[26]"                               LOC = "W31" ;          
NET  "*DDR2_DQ[27]"                               LOC = "V30" ;          
NET  "*DDR2_DQ[28]"                               LOC = "AC30" ;          
NET  "*DDR2_DQ[29]"                               LOC = "W29" ;          
NET  "*DDR2_DQ[30]"                               LOC = "V27" ;          
NET  "*DDR2_DQ[31]"                               LOC = "W27" ;          
NET  "*DDR2_DQ[32]"                               LOC = "V29" ;          
NET  "*DDR2_DQ[33]"                               LOC = "Y27" ;          
NET  "*DDR2_DQ[34]"                               LOC = "Y26" ;          
NET  "*DDR2_DQ[35]"                               LOC = "W24" ;          
NET  "*DDR2_DQ[36]"                               LOC = "V28" ;          
NET  "*DDR2_DQ[37]"                               LOC = "W25" ;          
NET  "*DDR2_DQ[38]"                               LOC = "W26" ;          
NET  "*DDR2_DQ[39]"                               LOC = "V24" ;          
NET  "*DDR2_DQ[40]"                               LOC = "R24" ;          
NET  "*DDR2_DQ[41]"                               LOC = "P25" ;          
NET  "*DDR2_DQ[42]"                               LOC = "N24" ;          
NET  "*DDR2_DQ[43]"                               LOC = "P26" ;          
NET  "*DDR2_DQ[44]"                               LOC = "T24" ;          
NET  "*DDR2_DQ[45]"                               LOC = "N25" ;          
NET  "*DDR2_DQ[46]"                               LOC = "P27" ;          
NET  "*DDR2_DQ[47]"                               LOC = "N28" ;          
NET  "*DDR2_DQ[48]"                               LOC = "M28" ;          
NET  "*DDR2_DQ[49]"                               LOC = "L28" ;          
NET  "*DDR2_DQ[50]"                               LOC = "F25" ;          
NET  "*DDR2_DQ[51]"                               LOC = "H25" ;          
NET  "*DDR2_DQ[52]"                               LOC = "K27" ;          
NET  "*DDR2_DQ[53]"                               LOC = "K28" ;          
NET  "*DDR2_DQ[54]"                               LOC = "H24" ;          
NET  "*DDR2_DQ[55]"                               LOC = "G26" ;          
NET  "*DDR2_DQ[56]"                               LOC = "G25" ;          
NET  "*DDR2_DQ[57]"                               LOC = "M26" ;          
NET  "*DDR2_DQ[58]"                               LOC = "J24" ;          
NET  "*DDR2_DQ[59]"                               LOC = "L26" ;          
NET  "*DDR2_DQ[60]"                               LOC = "J27" ;          
NET  "*DDR2_DQ[61]"                               LOC = "M25" ;          
NET  "*DDR2_DQ[62]"                               LOC = "L25" ;          
NET  "*DDR2_DQ[63]"                               LOC = "L24" ;          

NET  "DDR2_A[12]"                                LOC = "T31" ;          
NET  "DDR2_A[11]"                                LOC = "R29" ;          
NET  "DDR2_A[10]"                                LOC = "J31" ;          
NET  "DDR2_A[9]"                                 LOC = "R28" ;          
NET  "DDR2_A[8]"                                 LOC = "M31" ;          
NET  "DDR2_A[7]"                                 LOC = "P30" ;          
NET  "DDR2_A[6]"                                 LOC = "P31" ;          
NET  "DDR2_A[5]"                                 LOC = "L31" ;          
NET  "DDR2_A[4]"                                 LOC = "K31" ;          
NET  "DDR2_A[3]"                                 LOC = "P29" ;          
NET  "DDR2_A[2]"                                 LOC = "N29" ;          
NET  "DDR2_A[1]"                                 LOC = "M30" ;          
NET  "DDR2_A[0]"                                 LOC = "L30" ;          

NET  "DDR2_BA[1]"                                LOC = "J30" ;          
NET  "DDR2_BA[0]"                                LOC = "G31" ;          

NET  "DDR2_RAS_N"                                LOC = "H30" ;          

NET  "DDR2_CAS_N"                                LOC = "E31" ;          

NET  "DDR2_WE_N"                                 LOC = "K29" ;          

NET  "DDR2_CS_N"                                 LOC = "L29" ;          

NET  "DDR2_ODT"                                  LOC = "F31" ;          

NET  "DDR2_CKE"                                  LOC = "T28" ;          

NET  "DDR2_DM[0]"                                LOC = "AJ31" ;          
NET  "DDR2_DM[1]"                                LOC = "AE28" ;          
NET  "DDR2_DM[2]"                                LOC = "Y24" ;          
NET  "DDR2_DM[3]"                                LOC = "Y31" ;          
NET  "DDR2_DM[4]"                                LOC = "V25" ;          
NET  "DDR2_DM[5]"                                LOC = "P24" ;          
NET  "DDR2_DM[6]"                                LOC = "F26" ;          
NET  "DDR2_DM[7]"                                LOC = "J25" ;          

NET  "*DDR2_DQS[0]"                               LOC = "AA29" ;          
NET  "*DDR2_DQS_N[0]"                             LOC = "AA30" ;          
NET  "*DDR2_DQS[1]"                               LOC = "AK28" ;          
NET  "*DDR2_DQS_N[1]"                             LOC = "AK27" ;          
NET  "*DDR2_DQS[2]"                               LOC = "AK26" ;          
NET  "*DDR2_DQS_N[2]"                             LOC = "AJ27" ;          
NET  "*DDR2_DQS[3]"                               LOC = "AB31" ;          
NET  "*DDR2_DQS_N[3]"                             LOC = "AA31" ;          
NET  "*DDR2_DQS[4]"                               LOC = "Y28" ;          
NET  "*DDR2_DQS_N[4]"                             LOC = "Y29" ;          
NET  "*DDR2_DQS[5]"                               LOC = "E26" ;          
NET  "*DDR2_DQS_N[5]"                             LOC = "E27" ;          
NET  "*DDR2_DQS[6]"                               LOC = "H28" ;          
NET  "*DDR2_DQS_N[6]"                             LOC = "G28" ;          
NET  "*DDR2_DQS[7]"                               LOC = "G27" ;          
NET  "*DDR2_DQS_N[7]"                             LOC = "H27" ;          
NET  "DDR2_CLK_P[0]"                             LOC = "AK29" ;          
NET  "DDR2_CLK_N[0]"                             LOC = "AJ29" ;          
NET  "DDR2_CLK_P[1]"                             LOC = "E28" ;          
NET  "DDR2_CLK_N[1]"                             LOC = "F28" ;          


###############################################################################
# Define multicycle paths - these paths may take longer because additional
# time allowed for logic to settle in calibration/initialization FSM
###############################################################################

# MIG 2.1: Eliminate Timegroup definitions for CLK0, and CLK90. Instead trace
#          multicycle paths from originating flip-flop to ANY destination
#          flip-flop (or in some cases, it can also be a BRAM)
# MUX Select for either rising/falling CLK0 for 2nd stage read capture
INST "*/u_phy_calib/gen_rd_data_sel*.u_ff_rd_data_sel" TNM = "TNM_RD_DATA_SEL";
TIMESPEC "TS_MC_RD_DATA_SEL" = FROM "TNM_RD_DATA_SEL" TO FFS
"TS_SYS_CLK" * 4;
# MUX select for read data - optional delay on data to account for byte skews
INST "*/u_usr_rd/gen_rden_sel_mux*.u_ff_rden_sel_mux" TNM = "TNM_RDEN_SEL_MUX";
TIMESPEC "TS_MC_RDEN_SEL_MUX" = FROM "TNM_RDEN_SEL_MUX" TO FFS
"TS_SYS_CLK" * 4;
# Calibration/Initialization complete status flag (for PHY logic only) - can
# be used to drive both flip-flops and BRAMs
INST "*/u_phy_init/u_ff_phy_init_data_sel" TNM = "TNM_PHY_INIT_DATA_SEL";
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_0" = FROM "TNM_PHY_INIT_DATA_SEL" TO FFS
"TS_SYS_CLK" * 4;
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_90" = FROM "TNM_PHY_INIT_DATA_SEL" TO RAMS
"TS_SYS_CLK" * 4;
# Select (address) bits for SRL32 shift registers used in stage3/stage4
# calibration
INST "*/u_phy_calib/gen_gate_dly*.u_ff_gate_dly" TNM = "TNM_GATE_DLY";
TIMESPEC "TS_MC_GATE_DLY" = FROM "TNM_GATE_DLY" TO FFS "TS_SYS_CLK" * 4;

INST "*/u_phy_calib/gen_rden_dly*.u_ff_rden_dly" TNM = "TNM_RDEN_DLY";
TIMESPEC "TS_MC_RDEN_DLY" = FROM "TNM_RDEN_DLY" TO FFS "TS_SYS_CLK" * 4;

INST "*/u_phy_calib/gen_cal_rden_dly*.u_ff_cal_rden_dly"
  TNM = "TNM_CAL_RDEN_DLY";
TIMESPEC "TS_MC_CAL_RDEN_DLY" = FROM "TNM_CAL_RDEN_DLY" TO FFS
"TS_SYS_CLK" * 4;
############################################################################### 
#The following constraint is added to prevent (false) hold time violations on
#the data path from stage1 to stage2 capture flops.  Stage1 flops are clocked by 
#the delayed DQS and stage2 flops are clocked by the clk0 clock. Placing a TIG 
#on the DQ IDDR capture flop instance to achieve this is acceptable because timing
#is guaranteed through the use of separate Predictable IP constraints. These
#violations are reported when anunconstrained path report is run.	  
############################################################################### 
INST "*/gen_dq[*].u_iob_dq/gen*.u_iddr_dq" TIG ;
###############################################################################
# DQS Read Post amble Glitch Squelch circuit related constraints
###############################################################################

###############################################################################
# LOC placement of DQS-squelch related IDDR and IDELAY elements
# Each circuit can be located at any of the following locations:
#  1. Unused "N"-side of DQS differential pair I/O
#  2. DM data mask (output only, input side is free for use)
#  3. Any output-only site
###############################################################################

###############################################################################
#The following constraint is added to avoid the HOLD violations in the trace report
#when run for unconstrained paths.These two FF groups will be clocked by two different
# clocks and hence there should be no timing analysis performed on this path.
###############################################################################
INST "*/u_mem_if_top/u_phy_top/u_phy_io/u_phy_calib/gen_gate[*].u_en_dqs_ff" TNM = EN_DQS_FF;
TIMESPEC TS_FROM_EN_DQS_FF_TO_DQ_CE_FF = FROM EN_DQS_FF TO TNM_DQ_CE_IDDR 3.85 ns DATAPATHONLY;

INST "*/gen_dqs[0].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y87";
INST "*/gen_dqs[0].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y87";
INST "*/gen_dqs[1].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y58";
INST "*/gen_dqs[1].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y58";
INST "*/gen_dqs[2].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y75";
INST "*/gen_dqs[2].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y75";
INST "*/gen_dqs[3].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y100";
INST "*/gen_dqs[3].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y100";
INST "*/gen_dqs[4].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y102";
INST "*/gen_dqs[4].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y102";
INST "*/gen_dqs[5].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y244";
INST "*/gen_dqs[5].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y244";
INST "*/gen_dqs[6].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y260";
INST "*/gen_dqs[6].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y260";
INST "*/gen_dqs[7].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y274";
INST "*/gen_dqs[7].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y274";

###############################################################################
# LOC and timing constraints for flop driving DQS CE enable signal
# from fabric logic. Even though the absolute delay on this path is
# calibrated out (when synchronizing this output to DQS), the delay
# should still be kept as low as possible to reduce post-calibration
# voltage/temp variations - these are roughly proportional to the
# absolute delay of the path.                                    
#	The following code has been commented for V5 as the predictable IP will take 
#	care of placement of these flops by meeting the MAXDELAY requirement.  
#	These constraints will be removed in the next release.  
###############################################################################

INST "*/u_phy_calib/gen_gate[0].u_en_dqs_ff"  LOC = SLICE_X0Y48;
INST "*/u_phy_calib/gen_gate[1].u_en_dqs_ff"  LOC = SLICE_X0Y29;
INST "*/u_phy_calib/gen_gate[2].u_en_dqs_ff"  LOC = SLICE_X0Y31;
INST "*/u_phy_calib/gen_gate[3].u_en_dqs_ff"  LOC = SLICE_X0Y50;
INST "*/u_phy_calib/gen_gate[4].u_en_dqs_ff"  LOC = SLICE_X0Y51;
INST "*/u_phy_calib/gen_gate[5].u_en_dqs_ff"  LOC = SLICE_X0Y128;
INST "*/u_phy_calib/gen_gate[6].u_en_dqs_ff"  LOC = SLICE_X0Y130;
INST "*/u_phy_calib/gen_gate[7].u_en_dqs_ff"  LOC = SLICE_X0Y131;

# Control for DQS gate - from fabric flop. Prevent "runaway" delay -
# two parts to this path: (1) from fabric flop to IDELAY, (2) from
# IDELAY to asynchronous reset of IDDR that drives the DQ CE's
# This can be relaxed by the user for lower frequencies:
# 300MHz = 850ps, 267MHz = 900ps. At 200MHz = 950ps.
# In general PAR should be able to route this
# within 900ps over all speed grades.
NET "*/u_phy_io/en_dqs[*]" MAXDELAY = 900 ps;
NET "*/u_phy_io/gen_dqs*.u_iob_dqs/en_dqs_sync" MAXDELAY = 850 ps;

###############################################################################
# "Half-cycle" path constraint from IOB flip-flop to CE pin for all DQ IDDR's
# for DQS Read Post amble Glitch Squelch circuit
###############################################################################

# Max delay from output of IOB flip-flop to CE input of DQ IDDRs =
#  tRPST + some slack where slack account for rise-time of DQS on board.
#  For now assume slack = 0.400ns (based on initial SPICE simulations,
#  assumes use of ODT), so time = 0.4*Tcyc + 0.40ns = 1.6ns @333MHz
INST "*/gen_dqs[*].u_iob_dqs/u_iddr_dq_ce" TNM = "TNM_DQ_CE_IDDR";
INST "*/gen_dq[*].u_iob_dq/gen_stg2_*.u_iddr_dq" TNM = "TNM_DQS_FLOPS";
TIMESPEC "TS_DQ_CE" = FROM "TNM_DQ_CE_IDDR" TO "TNM_DQS_FLOPS" 3.6 ns;

